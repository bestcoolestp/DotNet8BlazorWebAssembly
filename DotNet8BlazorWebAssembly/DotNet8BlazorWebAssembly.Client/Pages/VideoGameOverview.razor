@page "/videogames"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))

<PageTitle>PC Games</PageTitle>

<h1>PC Games</h1>

<p>이 부분은 데이터를 시범적으로 보여주기 위한겁니다.</p>

@if (videoGames.Count == 0)
{
    <p><em>로딩중 Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Title</th>
                <th>Publisher</th>
                <th>Release Year</th>
                <th></th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var videoGame in videoGames)
            {
                <tr>
                    <td>@videoGame.Title</td>
                    <td>@videoGame.Publisher</td>
                    <td>@videoGame.ReleaseYear</td>
                    <td>
                        <button class="btn btn-primary" @onclick="@(() => EditGame(@videoGame.Id))">Edit</button>
                    </td>
                    <td>
                        <button class="btn btn-danger" @onclick="@(() => DeleteGame(@videoGame.Id))">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
<button class="btn btn-primary" @onclick="AddGame">Add a new game</button>

@code {
    List<VideoGame> videoGames = new List<VideoGame>();
    protected override async Task OnInitializedAsync()
    {
        await LoadGame();
    }

    void AddGame()
    {
        NavigationManager.NavigateTo("edit-game");
    }

    void EditGame(int id)
    {
        NavigationManager.NavigateTo($"edit-game/{id}");
    }

    async Task DeleteGame(int id)
    {
        await Http.DeleteAsync($"api/videogames/{id}");
        await LoadGame();
    }

    async Task LoadGame()
    {
        var result = await Http.GetFromJsonAsync<List<VideoGame>>("api/videogames");

        if (result is not null)
        {
            videoGames = result;
        }
    }
}
